{"ast":null,"code":"var _jsxFileName = \"/home/isaac/Documents/Developers Institute/Teaching/MINI PROJECTS/4 - NPM, REACT/meme/src/MemeGenerator.js\";\nimport React, { Component } from 'react';\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      // console.log(\"working!\")\n      //Get the name from the attribute name from the inputs of the boxes\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value; //Update the state with the value from the box\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      //Prevent the refreshing of the page\n      event.preventDefault(); //Get a random int (index on the array), Get the meme from that index\n\n      const randNum = Math.floor(Math.random() * this.state.allMemesImgs.length); //Set 'randomImg' to the '.url' of the random item I grabbed\n\n      const randMemeImg = this.state.allMemesImgs[randNum].url; //Update State for the randomImg property for the value to be randoMemeImg\n\n      this.setState({\n        randomImg: randMemeImg\n      });\n    };\n\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemesImgs: []\n    }; //Binds in the constructor(if you dont use arrow functions)\n    // this.handleChange = this.handleChange.bind(this)\n    // this.handleSubmit = this.handleSubmit.bind(this)\n  } //Getting Data with lifecycle\n\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const memes = response.data.memes;\n      console.log(memes[0]);\n      this.setState({\n        allMemesImgs: memes\n      });\n    });\n  } //onChange handler Event method for the inputs\n\n\n  render() {\n    return (// <h1>MEME GENERATOR SECTION</h1>\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"meme-form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        placeholder: \"Top Text\",\n        value: this.state.topText,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        placeholder: \"Bottom Text\",\n        value: this.state.bottomText,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Gen\"), React.createElement(\"button\", {\n        className: \"print\",\n        onClick: () => window.print(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Print\")), React.createElement(\"div\", {\n        className: \"meme\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: this.state.randomImg,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        className: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.topText), React.createElement(\"h2\", {\n        className: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.state.bottomText)))\n    );\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Teaching/MINI PROJECTS/4 - NPM, REACT/meme/src/MemeGenerator.js"],"names":["React","Component","MemeGenerator","constructor","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemesImgs","length","randMemeImg","url","randomImg","topText","bottomText","componentDidMount","fetch","then","response","json","memes","data","console","log","render","window","print"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemesImgs: []\n        }\n        \n        //Binds in the constructor(if you dont use arrow functions)\n        // this.handleChange = this.handleChange.bind(this)\n        // this.handleSubmit = this.handleSubmit.bind(this)\n\n    }\n\n    //Getting Data with lifecycle\n    componentDidMount(){\n       fetch(\"https://api.imgflip.com/get_memes\")\n          .then(response => response.json())\n          .then(response => {\n              const {memes} = response.data\n              console.log(memes[0]) \n              this.setState({allMemesImgs: memes})\n\n          })\n    }\n\n\n    //onChange handler Event method for the inputs\n    handleChange = (event) => {\n\n        // console.log(\"working!\")\n\n        //Get the name from the attribute name from the inputs of the boxes\n        const {name, value} = event.target;\n\n        //Update the state with the value from the box\n        this.setState({ [name]: value});\n\n    }\n\n\n    //onSubmit event method to generate random meme from array\n    handleSubmit = (event) => {\n\n        //Prevent the refreshing of the page\n        event.preventDefault()\n\n        //Get a random int (index on the array), Get the meme from that index\n        const randNum = Math.floor(Math.random() * this.state.allMemesImgs.length);\n\n        //Set 'randomImg' to the '.url' of the random item I grabbed\n        const randMemeImg = this.state.allMemesImgs[randNum].url;\n\n        //Update State for the randomImg property for the value to be randoMemeImg\n        this.setState({ randomImg:randMemeImg });\n\n    }\n\n        render() {\n            return(\n\n                // <h1>MEME GENERATOR SECTION</h1>\n\n                \n\n                <div>\n\n                   \n\n                    <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n\n                    <input \n                        type=\"text\"\n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    />\n\n                     <input \n                        type=\"text\"\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    />\n\n\n                    <button>Gen</button>\n\n                    <button className='print' onClick={() => window.print()}>Print</button>\n\n                    </form>\n\n                    <div className=\"meme\">\n                        <img src={this.state.randomImg} alt=\"\" />\n                        <h2 className=\"top\">{this.state.topText}</h2>\n                        <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                    </div>\n\n                </div>\n            )\n        }\n}\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}