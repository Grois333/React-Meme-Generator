{"ast":null,"code":"var _jsxFileName = \"/home/isaac/Documents/Developers Institute/Teaching/MINI PROJECTS/4 - NPM, REACT/meme/src/MemeGenerator.js\";\nimport React, { Component } from 'react';\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemesImgs: []\n    }; //Binds in the constructor\n\n    this.handleChange = this.handleChange.bind(this); // this.handleSubmit = this.handleSubmit.bind(this)\n  } //Getting Data with lifecycle\n\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const memes = response.data.memes;\n      console.log(memes[0]);\n      this.setState({\n        allMemesImgs: memes\n      });\n    });\n  } //onChange handler Event method for the inputs\n\n\n  handleChange(event) {\n    // console.log(\"working!\")\n    //Get the name from the attribute name from the inputs of the boxes\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; //Update the state with the value from the box\n\n    this.setState({\n      [name]: value\n    });\n  } //onSubmit event method to generate random meme from array\n\n\n  handleSubmit(event) {\n    //Prevent the refreshing of the page\n    event.preventDefault();\n  }\n\n  render() {\n    return (// <h1>MEME GENERATOR SECTION</h1>\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"meme-form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        placeholder: \"Top Text\",\n        value: this.state.topText,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        placeholder: \"Bottom Text\",\n        value: this.state.bottomText,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Gen\")), React.createElement(\"div\", {\n        className: \"meme\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: this.state.randomImg,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        className: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.topText), React.createElement(\"h2\", {\n        className: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, this.state.bottomText)))\n    );\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/home/isaac/Documents/Developers Institute/Teaching/MINI PROJECTS/4 - NPM, REACT/meme/src/MemeGenerator.js"],"names":["React","Component","MemeGenerator","constructor","state","topText","bottomText","randomImg","allMemesImgs","handleChange","bind","componentDidMount","fetch","then","response","json","memes","data","console","log","setState","event","target","name","value","handleSubmit","preventDefault","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AAClCE,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,EADA;AAETC,MAAAA,UAAU,EAAE,EAFH;AAGTC,MAAAA,SAAS,EAAE,+BAHF;AAITC,MAAAA,YAAY,EAAE;AAJL,KAAb,CAFU,CASV;;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB,CAVU,CAWV;AAEH,GAdiC,CAgBlC;;;AACAC,EAAAA,iBAAiB,GAAE;AAChBC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACIC,IADJ,CACSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADrB,EAEIF,IAFJ,CAESC,QAAQ,IAAI;AAAA,YACPE,KADO,GACEF,QAAQ,CAACG,IADX,CACPD,KADO;AAEdE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAAC,CAAD,CAAjB;AACA,WAAKI,QAAL,CAAc;AAACZ,QAAAA,YAAY,EAAEQ;AAAf,OAAd;AAEH,KAPJ;AAQF,GA1BiC,CA6BlC;;;AACAP,EAAAA,YAAY,CAACY,KAAD,EAAO;AAEf;AAEA;AAJe,0BAKOA,KAAK,CAACC,MALb;AAAA,UAKRC,IALQ,iBAKRA,IALQ;AAAA,UAKFC,KALE,iBAKFA,KALE,EAOf;;AACA,SAAKJ,QAAL,CAAc;AAAE,OAACG,IAAD,GAAQC;AAAV,KAAd;AAEH,GAxCiC,CA2ClC;;;AACAC,EAAAA,YAAY,CAACJ,KAAD,EAAO;AAEf;AACAA,IAAAA,KAAK,CAACK,cAAN;AACH;;AAEGC,EAAAA,MAAM,GAAG;AACL,WAEI;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,WAAhB;AAA4B,QAAA,QAAQ,EAAE,KAAKF,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,IAAI,EAAC,SAFT;AAGI,QAAA,WAAW,EAAC,UAHhB;AAII,QAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWC,OAJtB;AAKI,QAAA,QAAQ,EAAE,KAAKI,YALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,EAUC;AACG,QAAA,IAAI,EAAC,MADR;AAEG,QAAA,IAAI,EAAC,YAFR;AAGG,QAAA,WAAW,EAAC,aAHf;AAIG,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWE,UAJrB;AAKG,QAAA,QAAQ,EAAE,KAAKG,YALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVD,EAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAnBA,CADJ,EAwBI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,GAAG,EAAE,KAAKL,KAAL,CAAWG,SAArB;AAAgC,QAAA,GAAG,EAAC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAI,QAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqB,KAAKH,KAAL,CAAWC,OAAhC,CAFJ,EAGI;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwB,KAAKD,KAAL,CAAWE,UAAnC,CAHJ,CAxBJ;AAJJ;AAoCH;;AAvF6B;;AAyFtC,eAAeJ,aAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemesImgs: []\n        }\n        \n        //Binds in the constructor\n        this.handleChange = this.handleChange.bind(this)\n        // this.handleSubmit = this.handleSubmit.bind(this)\n\n    }\n\n    //Getting Data with lifecycle\n    componentDidMount(){\n       fetch(\"https://api.imgflip.com/get_memes\")\n          .then(response => response.json())\n          .then(response => {\n              const {memes} = response.data\n              console.log(memes[0]) \n              this.setState({allMemesImgs: memes})\n\n          })\n    }\n\n\n    //onChange handler Event method for the inputs\n    handleChange(event){\n\n        // console.log(\"working!\")\n\n        //Get the name from the attribute name from the inputs of the boxes\n        const {name, value} = event.target;\n\n        //Update the state with the value from the box\n        this.setState({ [name]: value});\n\n    }\n\n\n    //onSubmit event method to generate random meme from array\n    handleSubmit(event){\n\n        //Prevent the refreshing of the page\n        event.preventDefault()\n    }\n\n        render() {\n            return(\n\n                // <h1>MEME GENERATOR SECTION</h1>\n\n                <div>\n                    <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n\n                    <input \n                        type=\"text\"\n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    />\n\n                     <input \n                        type=\"text\"\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    />\n\n\n                    <button>Gen</button>\n\n                    </form>\n\n                    <div className=\"meme\">\n                        <img src={this.state.randomImg} alt=\"\" />\n                        <h2 className=\"top\">{this.state.topText}</h2>\n                        <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                    </div>\n\n                </div>\n            )\n        }\n}\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}